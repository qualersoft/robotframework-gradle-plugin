package de.qualersoft.robotframework.gradleplugin.tasks

import de.qualersoft.robotframework.gradleplugin.configurations.RebotRobotConfiguration
import org.gradle.api.Action
import org.gradle.api.file.FileCollection
import org.gradle.api.tasks.InputFiles
import org.gradle.api.tasks.PathSensitive
import org.gradle.api.tasks.PathSensitivity

/**
 * Rebot can be used to generate logs and reports in HTML format. It can also
 * produce new XML output files which can be further processed with Rebot or
 * other tools.
 *
 * Inputs to Rebot are XML output files generated by Robot Framework or by earlier
 * Rebot executions. When more than one input file is given, a new top level test
 * suite containing suites in the given files is created by default. This allows
 * combining multiple outputs together to create higher level reports. An
 * exception is that if --merge is used, results are combined by adding suites
 * and tests in subsequent outputs into the first suite structure. If same test
 * is found from multiple outputs, the last one replaces the earlier ones.
 */
open class RebotTask : BasicRobotFrameworkTask() {

  private val rebot = objectFactory.property(RebotRobotConfiguration::class.java)
    .convention(rfExtension.rebot)

  fun rebot(action: Action<RebotRobotConfiguration>) {
    action.execute(rebot.get())
  }

  fun rebot(config: RebotRobotConfiguration.() -> Unit) {
    rebot.get().apply(config)
  }

  /**
   * The XML output file generated by a previews robot or rebot run.
   */
  @InputFiles
  @PathSensitive(PathSensitivity.ABSOLUTE)
  var sources: FileCollection = objectFactory.fileCollection()

  override fun exec() {
    val inputs = sources.files.map { it.absolutePath }
    rfArgs = rfArgs + rebot.get().generateArguments().toList()
    super.executeRobotCommand("rebot", inputs)
  }
}